<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.19.9
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Modstore\EbayBrowseApi\Model;

use \ArrayAccess;
use \Modstore\EbayBrowseApi\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the product information of the item.
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_images' => '\Modstore\EbayBrowseApi\Model\Image[]',
        'additional_product_identities' => '\Modstore\EbayBrowseApi\Model\AdditionalProductIdentity[]',
        'aspect_groups' => '\Modstore\EbayBrowseApi\Model\AspectGroup[]',
        'brand' => 'string',
        'description' => 'string',
        'gtins' => 'string[]',
        'image' => '\Modstore\EbayBrowseApi\Model\Image',
        'mpns' => 'string[]',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_images' => null,
        'additional_product_identities' => null,
        'aspect_groups' => null,
        'brand' => null,
        'description' => null,
        'gtins' => null,
        'image' => null,
        'mpns' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_images' => false,
        'additional_product_identities' => false,
        'aspect_groups' => false,
        'brand' => false,
        'description' => false,
        'gtins' => false,
        'image' => false,
        'mpns' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_images' => 'additionalImages',
        'additional_product_identities' => 'additionalProductIdentities',
        'aspect_groups' => 'aspectGroups',
        'brand' => 'brand',
        'description' => 'description',
        'gtins' => 'gtins',
        'image' => 'image',
        'mpns' => 'mpns',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_images' => 'setAdditionalImages',
        'additional_product_identities' => 'setAdditionalProductIdentities',
        'aspect_groups' => 'setAspectGroups',
        'brand' => 'setBrand',
        'description' => 'setDescription',
        'gtins' => 'setGtins',
        'image' => 'setImage',
        'mpns' => 'setMpns',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_images' => 'getAdditionalImages',
        'additional_product_identities' => 'getAdditionalProductIdentities',
        'aspect_groups' => 'getAspectGroups',
        'brand' => 'getBrand',
        'description' => 'getDescription',
        'gtins' => 'getGtins',
        'image' => 'getImage',
        'mpns' => 'getMpns',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_images', $data ?? [], null);
        $this->setIfExists('additional_product_identities', $data ?? [], null);
        $this->setIfExists('aspect_groups', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('gtins', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('mpns', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_images
     *
     * @return \Modstore\EbayBrowseApi\Model\Image[]|null
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Modstore\EbayBrowseApi\Model\Image[]|null $additional_images An array of containers with the URLs for the product images that are in addition to the primary image.
     *
     * @return self
     */
    public function setAdditionalImages($additional_images)
    {
        if (is_null($additional_images)) {
            throw new \InvalidArgumentException('non-nullable additional_images cannot be null');
        }
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets additional_product_identities
     *
     * @return \Modstore\EbayBrowseApi\Model\AdditionalProductIdentity[]|null
     */
    public function getAdditionalProductIdentities()
    {
        return $this->container['additional_product_identities'];
    }

    /**
     * Sets additional_product_identities
     *
     * @param \Modstore\EbayBrowseApi\Model\AdditionalProductIdentity[]|null $additional_product_identities An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request <b> fieldgroups</b> is set to <code>PRODUCT</code>.
     *
     * @return self
     */
    public function setAdditionalProductIdentities($additional_product_identities)
    {
        if (is_null($additional_product_identities)) {
            throw new \InvalidArgumentException('non-nullable additional_product_identities cannot be null');
        }
        $this->container['additional_product_identities'] = $additional_product_identities;

        return $this;
    }

    /**
     * Gets aspect_groups
     *
     * @return \Modstore\EbayBrowseApi\Model\AspectGroup[]|null
     */
    public function getAspectGroups()
    {
        return $this->container['aspect_groups'];
    }

    /**
     * Sets aspect_groups
     *
     * @param \Modstore\EbayBrowseApi\Model\AspectGroup[]|null $aspect_groups An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.
     *
     * @return self
     */
    public function setAspectGroups($aspect_groups)
    {
        if (is_null($aspect_groups)) {
            throw new \InvalidArgumentException('non-nullable aspect_groups cannot be null');
        }
        $this->container['aspect_groups'] = $aspect_groups;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The rich description of an eBay product, which might contain HTML.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gtins
     *
     * @return string[]|null
     */
    public function getGtins()
    {
        return $this->container['gtins'];
    }

    /**
     * Sets gtins
     *
     * @param string[]|null $gtins An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by <a href=\"https://www.gtin.info \" target=\"_blank\">https://www.gtin.info</a>. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
     *
     * @return self
     */
    public function setGtins($gtins)
    {
        if (is_null($gtins)) {
            throw new \InvalidArgumentException('non-nullable gtins cannot be null');
        }
        $this->container['gtins'] = $gtins;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Modstore\EbayBrowseApi\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Modstore\EbayBrowseApi\Model\Image|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets mpns
     *
     * @return string[]|null
     */
    public function getMpns()
    {
        return $this->container['mpns'];
    }

    /**
     * Sets mpns
     *
     * @param string[]|null $mpns An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.
     *
     * @return self
     */
    public function setMpns($mpns)
    {
        if (is_null($mpns)) {
            throw new \InvalidArgumentException('non-nullable mpns cannot be null');
        }
        $this->container['mpns'] = $mpns;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the product.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


