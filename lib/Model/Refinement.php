<?php
/**
 * Refinement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.19.9
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Modstore\EbayBrowseApi\Model;

use \ArrayAccess;
use \Modstore\EbayBrowseApi\ObjectSerializer;

/**
 * Refinement Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Refinement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Refinement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aspect_distributions' => '\Modstore\EbayBrowseApi\Model\AspectDistribution[]',
        'buying_option_distributions' => '\Modstore\EbayBrowseApi\Model\BuyingOptionDistribution[]',
        'category_distributions' => '\Modstore\EbayBrowseApi\Model\CategoryDistribution[]',
        'condition_distributions' => '\Modstore\EbayBrowseApi\Model\ConditionDistribution[]',
        'dominant_category_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aspect_distributions' => null,
        'buying_option_distributions' => null,
        'category_distributions' => null,
        'condition_distributions' => null,
        'dominant_category_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aspect_distributions' => false,
        'buying_option_distributions' => false,
        'category_distributions' => false,
        'condition_distributions' => false,
        'dominant_category_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aspect_distributions' => 'aspectDistributions',
        'buying_option_distributions' => 'buyingOptionDistributions',
        'category_distributions' => 'categoryDistributions',
        'condition_distributions' => 'conditionDistributions',
        'dominant_category_id' => 'dominantCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aspect_distributions' => 'setAspectDistributions',
        'buying_option_distributions' => 'setBuyingOptionDistributions',
        'category_distributions' => 'setCategoryDistributions',
        'condition_distributions' => 'setConditionDistributions',
        'dominant_category_id' => 'setDominantCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aspect_distributions' => 'getAspectDistributions',
        'buying_option_distributions' => 'getBuyingOptionDistributions',
        'category_distributions' => 'getCategoryDistributions',
        'condition_distributions' => 'getConditionDistributions',
        'dominant_category_id' => 'getDominantCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('aspect_distributions', $data ?? [], null);
        $this->setIfExists('buying_option_distributions', $data ?? [], null);
        $this->setIfExists('category_distributions', $data ?? [], null);
        $this->setIfExists('condition_distributions', $data ?? [], null);
        $this->setIfExists('dominant_category_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aspect_distributions
     *
     * @return \Modstore\EbayBrowseApi\Model\AspectDistribution[]|null
     */
    public function getAspectDistributions()
    {
        return $this->container['aspect_distributions'];
    }

    /**
     * Sets aspect_distributions
     *
     * @param \Modstore\EbayBrowseApi\Model\AspectDistribution[]|null $aspect_distributions An array of containers for the all the aspect refinements.
     *
     * @return self
     */
    public function setAspectDistributions($aspect_distributions)
    {
        if (is_null($aspect_distributions)) {
            throw new \InvalidArgumentException('non-nullable aspect_distributions cannot be null');
        }
        $this->container['aspect_distributions'] = $aspect_distributions;

        return $this;
    }

    /**
     * Gets buying_option_distributions
     *
     * @return \Modstore\EbayBrowseApi\Model\BuyingOptionDistribution[]|null
     */
    public function getBuyingOptionDistributions()
    {
        return $this->container['buying_option_distributions'];
    }

    /**
     * Sets buying_option_distributions
     *
     * @param \Modstore\EbayBrowseApi\Model\BuyingOptionDistribution[]|null $buying_option_distributions An array of containers for the all the buying option refinements.
     *
     * @return self
     */
    public function setBuyingOptionDistributions($buying_option_distributions)
    {
        if (is_null($buying_option_distributions)) {
            throw new \InvalidArgumentException('non-nullable buying_option_distributions cannot be null');
        }
        $this->container['buying_option_distributions'] = $buying_option_distributions;

        return $this;
    }

    /**
     * Gets category_distributions
     *
     * @return \Modstore\EbayBrowseApi\Model\CategoryDistribution[]|null
     */
    public function getCategoryDistributions()
    {
        return $this->container['category_distributions'];
    }

    /**
     * Sets category_distributions
     *
     * @param \Modstore\EbayBrowseApi\Model\CategoryDistribution[]|null $category_distributions An array of containers for the all the category refinements.
     *
     * @return self
     */
    public function setCategoryDistributions($category_distributions)
    {
        if (is_null($category_distributions)) {
            throw new \InvalidArgumentException('non-nullable category_distributions cannot be null');
        }
        $this->container['category_distributions'] = $category_distributions;

        return $this;
    }

    /**
     * Gets condition_distributions
     *
     * @return \Modstore\EbayBrowseApi\Model\ConditionDistribution[]|null
     */
    public function getConditionDistributions()
    {
        return $this->container['condition_distributions'];
    }

    /**
     * Sets condition_distributions
     *
     * @param \Modstore\EbayBrowseApi\Model\ConditionDistribution[]|null $condition_distributions An array of containers for the all the condition refinements.
     *
     * @return self
     */
    public function setConditionDistributions($condition_distributions)
    {
        if (is_null($condition_distributions)) {
            throw new \InvalidArgumentException('non-nullable condition_distributions cannot be null');
        }
        $this->container['condition_distributions'] = $condition_distributions;

        return $this;
    }

    /**
     * Gets dominant_category_id
     *
     * @return string|null
     */
    public function getDominantCategoryId()
    {
        return $this->container['dominant_category_id'];
    }

    /**
     * Sets dominant_category_id
     *
     * @param string|null $dominant_category_id The identifier of the category that most of the items are part of.
     *
     * @return self
     */
    public function setDominantCategoryId($dominant_category_id)
    {
        if (is_null($dominant_category_id)) {
            throw new \InvalidArgumentException('non-nullable dominant_category_id cannot be null');
        }
        $this->container['dominant_category_id'] = $dominant_category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


