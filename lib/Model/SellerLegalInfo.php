<?php
/**
 * SellerLegalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.
 *
 * The version of the OpenAPI document: v1.19.9
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Modstore\EbayBrowseApi\Model;

use \ArrayAccess;
use \Modstore\EbayBrowseApi\ObjectSerializer;

/**
 * SellerLegalInfo Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the contact information for a seller.
 * @package  Modstore\EbayBrowseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SellerLegalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SellerLegalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'fax' => 'string',
        'imprint' => 'string',
        'legal_contact_first_name' => 'string',
        'legal_contact_last_name' => 'string',
        'name' => 'string',
        'phone' => 'string',
        'registration_number' => 'string',
        'seller_provided_legal_address' => '\Modstore\EbayBrowseApi\Model\LegalAddress',
        'terms_of_service' => 'string',
        'vat_details' => '\Modstore\EbayBrowseApi\Model\VatDetail[]',
        'economic_operator' => '\Modstore\EbayBrowseApi\Model\EconomicOperator',
        'weee_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'fax' => null,
        'imprint' => null,
        'legal_contact_first_name' => null,
        'legal_contact_last_name' => null,
        'name' => null,
        'phone' => null,
        'registration_number' => null,
        'seller_provided_legal_address' => null,
        'terms_of_service' => null,
        'vat_details' => null,
        'economic_operator' => null,
        'weee_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
        'fax' => false,
        'imprint' => false,
        'legal_contact_first_name' => false,
        'legal_contact_last_name' => false,
        'name' => false,
        'phone' => false,
        'registration_number' => false,
        'seller_provided_legal_address' => false,
        'terms_of_service' => false,
        'vat_details' => false,
        'economic_operator' => false,
        'weee_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'fax' => 'fax',
        'imprint' => 'imprint',
        'legal_contact_first_name' => 'legalContactFirstName',
        'legal_contact_last_name' => 'legalContactLastName',
        'name' => 'name',
        'phone' => 'phone',
        'registration_number' => 'registrationNumber',
        'seller_provided_legal_address' => 'sellerProvidedLegalAddress',
        'terms_of_service' => 'termsOfService',
        'vat_details' => 'vatDetails',
        'economic_operator' => 'economicOperator',
        'weee_number' => 'weeeNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'fax' => 'setFax',
        'imprint' => 'setImprint',
        'legal_contact_first_name' => 'setLegalContactFirstName',
        'legal_contact_last_name' => 'setLegalContactLastName',
        'name' => 'setName',
        'phone' => 'setPhone',
        'registration_number' => 'setRegistrationNumber',
        'seller_provided_legal_address' => 'setSellerProvidedLegalAddress',
        'terms_of_service' => 'setTermsOfService',
        'vat_details' => 'setVatDetails',
        'economic_operator' => 'setEconomicOperator',
        'weee_number' => 'setWeeeNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'fax' => 'getFax',
        'imprint' => 'getImprint',
        'legal_contact_first_name' => 'getLegalContactFirstName',
        'legal_contact_last_name' => 'getLegalContactLastName',
        'name' => 'getName',
        'phone' => 'getPhone',
        'registration_number' => 'getRegistrationNumber',
        'seller_provided_legal_address' => 'getSellerProvidedLegalAddress',
        'terms_of_service' => 'getTermsOfService',
        'vat_details' => 'getVatDetails',
        'economic_operator' => 'getEconomicOperator',
        'weee_number' => 'getWeeeNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('imprint', $data ?? [], null);
        $this->setIfExists('legal_contact_first_name', $data ?? [], null);
        $this->setIfExists('legal_contact_last_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('registration_number', $data ?? [], null);
        $this->setIfExists('seller_provided_legal_address', $data ?? [], null);
        $this->setIfExists('terms_of_service', $data ?? [], null);
        $this->setIfExists('vat_details', $data ?? [], null);
        $this->setIfExists('economic_operator', $data ?? [], null);
        $this->setIfExists('weee_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The seller's business email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax The seller' business fax number.
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets imprint
     *
     * @return string|null
     */
    public function getImprint()
    {
        return $this->container['imprint'];
    }

    /**
     * Sets imprint
     *
     * @param string|null $imprint This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
     *
     * @return self
     */
    public function setImprint($imprint)
    {
        if (is_null($imprint)) {
            throw new \InvalidArgumentException('non-nullable imprint cannot be null');
        }
        $this->container['imprint'] = $imprint;

        return $this;
    }

    /**
     * Gets legal_contact_first_name
     *
     * @return string|null
     */
    public function getLegalContactFirstName()
    {
        return $this->container['legal_contact_first_name'];
    }

    /**
     * Sets legal_contact_first_name
     *
     * @param string|null $legal_contact_first_name The seller's first name.
     *
     * @return self
     */
    public function setLegalContactFirstName($legal_contact_first_name)
    {
        if (is_null($legal_contact_first_name)) {
            throw new \InvalidArgumentException('non-nullable legal_contact_first_name cannot be null');
        }
        $this->container['legal_contact_first_name'] = $legal_contact_first_name;

        return $this;
    }

    /**
     * Gets legal_contact_last_name
     *
     * @return string|null
     */
    public function getLegalContactLastName()
    {
        return $this->container['legal_contact_last_name'];
    }

    /**
     * Sets legal_contact_last_name
     *
     * @param string|null $legal_contact_last_name The seller's last name.
     *
     * @return self
     */
    public function setLegalContactLastName($legal_contact_last_name)
    {
        if (is_null($legal_contact_last_name)) {
            throw new \InvalidArgumentException('non-nullable legal_contact_last_name cannot be null');
        }
        $this->container['legal_contact_last_name'] = $legal_contact_last_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the seller's business.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The seller's business phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string|null $registration_number The seller's registration number. This is information used by some countries.
     *
     * @return self
     */
    public function setRegistrationNumber($registration_number)
    {
        if (is_null($registration_number)) {
            throw new \InvalidArgumentException('non-nullable registration_number cannot be null');
        }
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets seller_provided_legal_address
     *
     * @return \Modstore\EbayBrowseApi\Model\LegalAddress|null
     */
    public function getSellerProvidedLegalAddress()
    {
        return $this->container['seller_provided_legal_address'];
    }

    /**
     * Sets seller_provided_legal_address
     *
     * @param \Modstore\EbayBrowseApi\Model\LegalAddress|null $seller_provided_legal_address seller_provided_legal_address
     *
     * @return self
     */
    public function setSellerProvidedLegalAddress($seller_provided_legal_address)
    {
        if (is_null($seller_provided_legal_address)) {
            throw new \InvalidArgumentException('non-nullable seller_provided_legal_address cannot be null');
        }
        $this->container['seller_provided_legal_address'] = $seller_provided_legal_address;

        return $this;
    }

    /**
     * Gets terms_of_service
     *
     * @return string|null
     */
    public function getTermsOfService()
    {
        return $this->container['terms_of_service'];
    }

    /**
     * Sets terms_of_service
     *
     * @param string|null $terms_of_service This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
     *
     * @return self
     */
    public function setTermsOfService($terms_of_service)
    {
        if (is_null($terms_of_service)) {
            throw new \InvalidArgumentException('non-nullable terms_of_service cannot be null');
        }
        $this->container['terms_of_service'] = $terms_of_service;

        return $this;
    }

    /**
     * Gets vat_details
     *
     * @return \Modstore\EbayBrowseApi\Model\VatDetail[]|null
     */
    public function getVatDetails()
    {
        return $this->container['vat_details'];
    }

    /**
     * Sets vat_details
     *
     * @param \Modstore\EbayBrowseApi\Model\VatDetail[]|null $vat_details An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
     *
     * @return self
     */
    public function setVatDetails($vat_details)
    {
        if (is_null($vat_details)) {
            throw new \InvalidArgumentException('non-nullable vat_details cannot be null');
        }
        $this->container['vat_details'] = $vat_details;

        return $this;
    }

    /**
     * Gets economic_operator
     *
     * @return \Modstore\EbayBrowseApi\Model\EconomicOperator|null
     */
    public function getEconomicOperator()
    {
        return $this->container['economic_operator'];
    }

    /**
     * Sets economic_operator
     *
     * @param \Modstore\EbayBrowseApi\Model\EconomicOperator|null $economic_operator economic_operator
     *
     * @return self
     */
    public function setEconomicOperator($economic_operator)
    {
        if (is_null($economic_operator)) {
            throw new \InvalidArgumentException('non-nullable economic_operator cannot be null');
        }
        $this->container['economic_operator'] = $economic_operator;

        return $this;
    }

    /**
     * Gets weee_number
     *
     * @return string|null
     */
    public function getWeeeNumber()
    {
        return $this->container['weee_number'];
    }

    /**
     * Sets weee_number
     *
     * @param string|null $weee_number The Waste Electrical and Electronic Equipment (WEEE) registration number required for any seller to place electrical and electronic equipment on the market in Germany. This manufacturer number is assigned to the first distributors of electrical and electronic equipment and comprises a country code and an 8-digit sequence of digits (e.g. “WEEE Reg. No. DE 12345678”).
     *
     * @return self
     */
    public function setWeeeNumber($weee_number)
    {
        if (is_null($weee_number)) {
            throw new \InvalidArgumentException('non-nullable weee_number cannot be null');
        }
        $this->container['weee_number'] = $weee_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


